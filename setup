#!/usr/bin/env bash
#
# Dotfiles Setup Script with Parallel Processing
#
# Usage:
#   ./setup                    # Normal setup with parallel processing
#   ./setup --rollback        # Rollback changes from the last run
#
# Environment Variables:
#   DOTFILES_PARALLEL_JOBS    # Number of parallel jobs (default: 4)
#
# Examples:
#   DOTFILES_PARALLEL_JOBS=8 ./setup    # Use 8 parallel jobs
#   ./setup --rollback                   # Rollback the last changes
#

# Exit on any error, undefined variables, and pipe failures
set -euo pipefail

# Colors for output
readonly COLOR_RED='\033[0;31m'
readonly COLOR_GREEN='\033[0;32m'
readonly COLOR_BLUE='\033[0;36m'
readonly COLOR_YELLOW='\033[1;33m'
readonly COLOR_NC='\033[0m' # No Color

# Get script directory
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly BACKUP_DIR="$HOME/.dotfiles_backup_$(date +%Y%m%d_%H%M%S)"

# Global counters (use temporary files for parallel processing)
readonly COUNTER_DIR="/tmp/dotfiles_setup_$$"
readonly SUCCESS_COUNTER="$COUNTER_DIR/success"
readonly FAILURE_COUNTER="$COUNTER_DIR/failure"
readonly BACKUP_COUNTER="$COUNTER_DIR/backup"
readonly LOCK_FILE="$COUNTER_DIR/lock"

# Maximum number of parallel jobs
readonly MAX_JOBS=${DOTFILES_PARALLEL_JOBS:-4}

# Basic links
readonly BASIC_LINKS=(
    # shell
    ".zsh"
    ".zshrc"
    ".zshenv"
    ".inputrc"
    
    # linter
    ".textlintrc"
    
    # tmux
    ".tmux.conf"
    ".tmux"
    
    # git
    ".gitconfig"
    ".gitignore_global"
    
    # gem
    ".gemrc"
    
    # vim (and clones)
    ".vim"
    ".vimrc"
    ".gvimrc"
    
    # emacs
    ".emacs.d"
    
    # AI Agent
    ".claude"
    
    # language support tools
    ".ctags"
    ".tern-project"
)

# Basic .config links
readonly BASIC_CONFIG_LINKS=(
    "alacritty"
    "nvim"
    "powerline"
    "rofi"
    "tmux-powerline"
)

# macOS specific links
readonly MACOS_LINKS=(
    ".xvimrc"
    ".skhdrc"
    ".yabairc"
)

readonly MACOS_CONFIG_LINKS=(
    "karabiner"
)

# Linux specific links
readonly LINUX_LINKS=(
    ".xinitrc"
    ".Xresources"
    ".xsession"
)

readonly LINUX_CONFIG_LINKS=(
    "awesome"
    "fontconfig"
)

# Counter management functions
init_counters() {
    mkdir -p "$COUNTER_DIR"
    echo "0" > "$SUCCESS_COUNTER"
    echo "0" > "$FAILURE_COUNTER"
    echo "0" > "$BACKUP_COUNTER"
}

cleanup_counters() {
    [[ -d "$COUNTER_DIR" ]] && rm -rf "$COUNTER_DIR"
}

increment_counter() {
    local counter_file="$1"
    local lockfile="$counter_file.lock"
    
    # Simple file-based locking
    while ! mkdir "$lockfile" 2>/dev/null; do
        sleep 0.01
    done
    
    local count
    count=$(<"$counter_file")
    echo $((count + 1)) > "$counter_file"
    
    rmdir "$lockfile"
}

get_counter() {
    local counter_file="$1"
    [[ -f "$counter_file" ]] && cat "$counter_file" || echo "0"
}

# Parallel processing function
run_parallel() {
    local -a items=("$@")
    local -a pids=()
    local job_count=0
    
    for item in "${items[@]}"; do
        # Wait if we've hit the job limit
        while [[ $job_count -ge $MAX_JOBS ]]; do
            # Check for completed jobs
            local new_pids=()
            for pid in "${pids[@]}"; do
                if kill -0 "$pid" 2>/dev/null; then
                    new_pids+=("$pid")
                else
                    ((job_count--))
                fi
            done
            pids=("${new_pids[@]}")
            
            # Short sleep if we're still at capacity
            [[ $job_count -ge $MAX_JOBS ]] && sleep 0.1
        done
        
        # Start new job
        "$item" &
        pids+=($!)
        ((job_count++))
    done
    
    # Wait for all remaining jobs to complete
    for pid in "${pids[@]}"; do
        wait "$pid"
    done
}

# Logging functions
log_info() {
    echo -e "${COLOR_BLUE}[INFO]${COLOR_NC} $1"
}

log_success() {
    echo -e "${COLOR_GREEN}[SUCCESS]${COLOR_NC} $1"
    increment_counter "$SUCCESS_COUNTER"
}

log_warning() {
    echo -e "${COLOR_YELLOW}[WARNING]${COLOR_NC} $1"
}

log_error() {
    echo -e "${COLOR_RED}[ERROR]${COLOR_NC} $1" >&2
    increment_counter "$FAILURE_COUNTER"
}

# Backup existing file/link
backup_existing() {
    local target="$1"
    
    if [[ -e "$target" || -L "$target" ]]; then
        # Create backup directory if it doesn't exist
        if [[ ! -d "$BACKUP_DIR" ]]; then
            mkdir -p "$BACKUP_DIR"
            log_info "Created backup directory: $BACKUP_DIR"
        fi
        
        local backup_path="$BACKUP_DIR/$(basename "$target")"
        if mv "$target" "$backup_path" 2>/dev/null; then
            log_warning "Backed up existing: $target → $backup_path"
            increment_counter "$BACKUP_COUNTER"
            return 0
        else
            log_error "Failed to backup: $target"
            return 1
        fi
    fi
    return 0
}

# Create symlink with error handling and backup
create_symlink() {
    local source="$1"
    local target="$2"
    
    # Check if source exists
    if [[ ! -e "$source" ]]; then
        log_error "Source does not exist: $source"
        return 1
    fi
    
    # Backup existing file/link if needed
    if ! backup_existing "$target"; then
        return 1
    fi
    
    # Create parent directory if needed
    local target_dir
    target_dir="$(dirname "$target")"
    if [[ ! -d "$target_dir" ]]; then
        if mkdir -p "$target_dir" 2>/dev/null; then
            log_info "Created directory: $target_dir"
        else
            log_error "Failed to create directory: $target_dir"
            return 1
        fi
    fi
    
    # Create symlink
    if ln -sf "$source" "$target" 2>/dev/null; then
        log_success "Created symlink: $target → $source"
        return 0
    else
        log_error "Failed to create symlink: $target → $source"
        return 1
    fi
}

# Worker function for parallel symlink creation
create_symlink_worker() {
    local source="$1"
    local target="$2"
    create_symlink "$source" "$target"
}

# Generate job functions for parallel execution
generate_symlink_jobs() {
    local -a links=("$@")
    local -a jobs=()
    
    for link in "${links[@]}"; do
        local source="$SCRIPT_DIR/$link"
        local target="$HOME/$link"
        
        if [[ -e "$source" ]]; then
            # Create a unique function name for this job (remove problematic characters)
            local job_func="job_$(echo "$link" | sed 's/[^a-zA-Z0-9]/_/g')"
            eval "$job_func() { create_symlink_worker '$source' '$target'; }"
            jobs+=("$job_func")
        fi
    done
    
    printf '%s\n' "${jobs[@]}"
}

generate_config_symlink_jobs() {
    local -a links=("$@")
    local -a jobs=()
    
    for link in "${links[@]}"; do
        local source="$SCRIPT_DIR/.config/$link"
        local target="$HOME/.config/$link"
        
        if [[ -e "$source" ]]; then
            # Create a unique function name for this job (remove problematic characters)
            local job_func="config_job_$(echo "$link" | sed 's/[^a-zA-Z0-9]/_/g')"
            eval "$job_func() { create_symlink_worker '$source' '$target'; }"
            jobs+=("$job_func")
        fi
    done
    
    printf '%s\n' "${jobs[@]}"
}

# Setup tmux plugin manager
setup_tpm() {
    local tpm_path="$HOME/.tmux/plugins/tpm"
    
    if [[ -d "$tpm_path" ]]; then
        log_info "TPM already exists: $tpm_path"
        return 0
    fi
    
    if git clone https://github.com/tmux-plugins/tpm "$tpm_path" 2>/dev/null; then
        log_success "Cloned tmux plugin manager: $tpm_path"
        return 0
    else
        log_error "Failed to clone tmux plugin manager"
        return 1
    fi
}

# Detect OS and setup appropriate links
setup_os_specific() {
    local os_name
    os_name="$(uname)"
    
    case "$os_name" in
        "Darwin")
            log_info "Detected macOS, setting up macOS-specific dotfiles"
            
            # Setup macOS specific links
            for link in "${MACOS_LINKS[@]}"; do
                if [[ -f "$SCRIPT_DIR/$link" ]]; then
                    create_symlink "$SCRIPT_DIR/$link" "$HOME/$link"
                fi
            done
            
            # Setup macOS specific config links
            for link in "${MACOS_CONFIG_LINKS[@]}"; do
                if [[ -d "$SCRIPT_DIR/.config/$link" ]]; then
                    create_symlink "$SCRIPT_DIR/.config/$link" "$HOME/.config/$link"
                fi
            done
            ;;
            
        "Linux")
            log_info "Detected Linux, setting up Linux-specific dotfiles"
            
            # Setup Linux specific links
            for link in "${LINUX_LINKS[@]}"; do
                if [[ -f "$SCRIPT_DIR/$link" ]]; then
                    create_symlink "$SCRIPT_DIR/$link" "$HOME/$link"
                fi
            done
            
            # Setup Linux specific config links
            for link in "${LINUX_CONFIG_LINKS[@]}"; do
                if [[ -d "$SCRIPT_DIR/.config/$link" ]]; then
                    create_symlink "$SCRIPT_DIR/.config/$link" "$HOME/.config/$link"
                fi
            done
            ;;
            
        *)
            log_warning "Unknown OS: $os_name. Skipping OS-specific setup."
            ;;
    esac
}

# Validate dependencies
check_dependencies() {
    local missing_deps=()
    
    for cmd in git readlink; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            missing_deps+=("$cmd")
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_error "Missing required dependencies: ${missing_deps[*]}"
        log_error "Please install the missing commands and try again."
        exit 1
    fi
}

# Print summary
print_summary() {
    local success_count failure_count backup_count
    success_count=$(get_counter "$SUCCESS_COUNTER")
    failure_count=$(get_counter "$FAILURE_COUNTER")
    backup_count=$(get_counter "$BACKUP_COUNTER")
    
    echo
    echo "============================================"
    log_info "Setup Summary:"
    echo "  ✅ Successful operations: $success_count"
    if [[ $failure_count -gt 0 ]]; then
        echo "  ❌ Failed operations: $failure_count"
    fi
    if [[ $backup_count -gt 0 ]]; then
        echo "  📦 Files backed up: $backup_count"
        echo "  📁 Backup location: $BACKUP_DIR"
    fi
    echo "  ⚡ Parallel jobs: $MAX_JOBS"
    echo "============================================"
    
    if [[ $failure_count -gt 0 ]]; then
        log_error "Setup completed with $failure_count errors. Please check the output above."
        exit 1
    else
        log_success "Dotfiles setup completed successfully!"
    fi
}

# Rollback function (for emergency use)
rollback() {
    if [[ -d "$BACKUP_DIR" ]]; then
        log_info "Rolling back changes from: $BACKUP_DIR"
        for backup_file in "$BACKUP_DIR"/*; do
            if [[ -f "$backup_file" || -d "$backup_file" ]]; then
                local original_path="$HOME/$(basename "$backup_file")"
                if mv "$backup_file" "$original_path" 2>/dev/null; then
                    log_success "Restored: $original_path"
                else
                    log_error "Failed to restore: $original_path"
                fi
            fi
        done
        rmdir "$BACKUP_DIR" 2>/dev/null || true
    else
        log_warning "No backup directory found for rollback."
    fi
}

# Main function
main() {
    # Handle rollback request
    if [[ "${1:-}" == "--rollback" ]]; then
        rollback
        exit 0
    fi
    
    log_info "Starting dotfiles setup (parallel mode: $MAX_JOBS jobs)..."
    log_info "Script directory: $SCRIPT_DIR"
    
    # Initialize counters
    init_counters
    
    # Check dependencies
    check_dependencies
    
    # Ensure .config directory exists
    if [[ ! -d "$HOME/.config" ]]; then
        if mkdir -p "$HOME/.config" 2>/dev/null; then
            log_info "Created .config directory"
        else
            log_error "Failed to create .config directory"
            cleanup_counters
            exit 1
        fi
    fi
    
    # Generate job lists
    log_info "Generating parallel job lists..."
    local -a basic_jobs config_jobs os_jobs
    
    # Basic dotfiles jobs
    mapfile -t basic_jobs < <(generate_symlink_jobs "${BASIC_LINKS[@]}")
    
    # Config dotfiles jobs  
    mapfile -t config_jobs < <(generate_config_symlink_jobs "${BASIC_CONFIG_LINKS[@]}")
    
    # OS-specific jobs
    local os_name
    os_name="$(uname)"
    case "$os_name" in
        "Darwin")
            log_info "Detected macOS, preparing macOS-specific jobs"
            mapfile -t -O ${#basic_jobs[@]} basic_jobs < <(generate_symlink_jobs "${MACOS_LINKS[@]}")
            mapfile -t -O ${#config_jobs[@]} config_jobs < <(generate_config_symlink_jobs "${MACOS_CONFIG_LINKS[@]}")
            ;;
        "Linux")
            log_info "Detected Linux, preparing Linux-specific jobs"
            mapfile -t -O ${#basic_jobs[@]} basic_jobs < <(generate_symlink_jobs "${LINUX_LINKS[@]}")
            mapfile -t -O ${#config_jobs[@]} config_jobs < <(generate_config_symlink_jobs "${LINUX_CONFIG_LINKS[@]}")
            ;;
        *)
            log_warning "Unknown OS: $os_name. Skipping OS-specific setup."
            ;;
    esac
    
    # Execute jobs in parallel
    log_info "Setting up basic dotfiles (${#basic_jobs[@]} files)..."
    if [[ ${#basic_jobs[@]} -gt 0 ]]; then
        run_parallel "${basic_jobs[@]}"
    fi
    
    log_info "Setting up .config dotfiles (${#config_jobs[@]} files)..."
    if [[ ${#config_jobs[@]} -gt 0 ]]; then
        run_parallel "${config_jobs[@]}"
    fi
    
    # Setup tmux plugin manager (not parallelized as it's a single operation)
    log_info "Setting up tmux plugin manager..."
    setup_tpm
    
    # Print summary and cleanup
    print_summary
    cleanup_counters
}

# Handle signals for cleanup
trap 'log_error "Setup interrupted by signal"; cleanup_counters; exit 130' INT TERM

# Run main function with all arguments
main "$@"
